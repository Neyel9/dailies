[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["agent"]

[project]
name = "hybrid-rag-system"
version = "1.0.0"
description = "A production-ready RAG system combining vector search with knowledge graphs"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Hybrid RAG Team", email = "team@hybrid-rag.com"},
]
keywords = ["rag", "ai", "vector-search", "knowledge-graph", "llm", "pydantic-ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core AI and Agent Framework
    "pydantic-ai>=0.3.0",
    "pydantic>=2.11.0",
    # FastAPI and Web Framework
    "fastapi>=0.115.0",
    "uvicorn>=0.34.0",
    "python-multipart>=0.0.20",
    "sse-starlette>=2.3.0",
    # HTTP and Async
    "httpx>=0.28.0",
    "aiohttp>=3.12.0",
    "aiofiles>=24.1.0",
    # Database Drivers
    "asyncpg>=0.30.0",
    "qdrant-client>=1.12.0",
    # Knowledge Graph
    "graphiti>=0.1.0",
    "neo4j>=5.28.0",
    # LLM Providers
    "openai>=1.90.0",
    "anthropic>=0.54.0",
    # Document Processing
    "pypdf2>=3.0.0",
    "pytesseract>=0.3.0",
    "python-docx>=1.1.0",
    "markdown>=3.7",
    "beautifulsoup4>=4.12.0",
    "lxml>=5.3.0",
    # Text Processing and Embeddings
    "sentence-transformers>=3.3.0",
    "transformers>=4.48.0",
    "torch>=2.5.0",
    "numpy>=1.24.0,<2.0.0",
    "scikit-learn>=1.3.0",
    # Utilities
    "python-dotenv>=1.1.0",
    "python-dateutil>=2.9.0",
    "pytz>=2025.2",
    "click>=8.2.0",
    "rich>=14.0.0",
    "tqdm>=4.67.0",
    # Security
    "cryptography>=44.0.0",
    "bcrypt>=4.2.0",
    "passlib>=1.7.0",
    # Configuration
    "pydantic-settings>=2.10.0",
    # File Handling
    "filetype>=1.2.0",
    # Image Processing (for PDF OCR)
    "pillow>=11.0.0",
    # Caching
    "redis>=5.2.0",
    # Graph Processing
    "networkx>=3.4.0",
    # JSON and Data Processing
    "orjson>=3.10.0",
    # Error Handling and Retry
    "tenacity>=9.0.0",
    # System Integration
    "psycopg2-binary>=2.9.0",
    "sqlalchemy>=2.0.0",
    # Additional Utilities
    "more-itertools>=10.5.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-mock>=3.14.0",

    # Development Tools
    "black>=24.10.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",

    # Development and Debugging
    "ipython>=8.30.0",
    "jupyter>=1.1.0",
]

jupyter = [
    "jupyter>=1.1.0",
    "ipython>=8.30.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]

docs = [
    "sphinx>=8.1.0",
    "sphinx-rtd-theme>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/hybrid-rag-system"
Documentation = "https://hybrid-rag-system.readthedocs.io"
Repository = "https://github.com/your-org/hybrid-rag-system.git"
Issues = "https://github.com/your-org/hybrid-rag-system/issues"

[project.scripts]
hybrid-rag = "agent.cli:main"
rag-agent = "agent.api:main"
rag-ingest = "agent.ingestion.cli:main"

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-mock>=3.14.0",
    "black>=24.10.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
    "agent/tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
